import numpy as np

# a1 = np.array((1, 2, 3))    # na podstawie krotki
# a2 = np.array([1, 2, 3])    # na podstawie listy
# print(str(a1) + "\n" + str(a2))
#
# a3 = np.array([[1, 2, 3], [4, 5, 6]])
# a4 = np.array([[1.1, 2, 3], [4, 5, 6]]) #upcasting
# print(str(a3) + "\n" + str(a4))

# print(np.zeros([3, 2]))
# print(np.ones([2, 4]))
# print(np.full((2, 3), 4))

# for _ in range(3):
#     print(np.random.random((1, 4)))
#
# m = np.random.random((3, 4))
# print(m)
# print("Wymiary tablicy: " + str(m.shape))
# print("Długość tablicy w pierwszym wymiarze: " + str(len(m)))  #  np. sprawdzanie liczby rekordów
# print("Liczba wymiarów tablicy: " + str(m.ndim))
# print("Liczba elementów tablicy: " + str(m.size))
# print("Typ elementów tablicy: " + str(m.dtype))
# m_int = m.astype(int)
# print("Konwersja tablicy do innego typu: " + str(m_int.dtype))
# np.info(np.ndarray.shape)

# m1 = np.random.randint(2, 10, (2, 3))
# m2 = np.random.randint(0, 10, (2, 3))
# print("m1: ")
# print(m1)
# print("m2: ")
# print(m2)
# print("m1 + m2: ")
# print(m1 + m2)
# print("np.add(m1, m2): ")
# print(np.add(m1, m2))

# m1 = np.random.randint(2, 10, (2, 3))
# print("m1: ")
# print(m1)
# print("m1 * 3: ")
# print(m1 * 3)
# print("3 * m1: ")
# print(3 * m1)
# print("np.multiply(m1, 3): ")
# print(np.multiply(m1, 3))
# print("np.multiply(3, m1): ")
# print(np.multiply(3, m1))

# m1 = np.array([[1, 2, 3], [4, 5, 6]])
# m2 = np.array([[1, 2, 3], [4, 5, 6]])
# print("m1: ")
# print(m1)
# print("m2: ")
# print(m2)
# print("m1 * m2: ")
# print(m1 * m2)
# print("np.multiply(m1, m2): ")
# print(np.multiply(m1, m2))
# print("np.matmul(m1, m2): ")


# m1 = np.array([[1, 2, 3], [4, 5, 6]])
# m2 = np.array([[1, 2], [3, 4], [5, 6]])
# print("m1: ")
# print(m1)
# print("m2: ")
# print(m2)
# print("np.matmul(m1, m2): ")
# print(np.matmul(m1, m2))
# print("m1.dot(m2): ")
# print(m1.dot(m2))
# print("m1 * m2: ")
# print(m1 * m2)

# m1 = np.ones((3, 3))
# m2 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
# print("m1: ")
# print(m1)
# print("m2: ")
# print(m2)
# print("m1 * m2: ")
# print(m1 * m2)
# print("np.matmul(m1, m2): ")
# print(np.matmul(m1, m2))

# m1 = np.ones((3, 3))
# m2 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
# print("m1: ")
# print(m1)
# print("m2: ")
# print(m2)
# print("np.matmul(m1, m2): ")
# print(np.matmul(m1, m2))
# print("np.matmul(m2, m1): ")
# print(np.matmul(m2, m1))

# m1 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
# print("m1: ")
# print(m1)
# print("e do potęgi liczb w macierzy: ")
# print(np.exp(m1))
# print("Elementy macierzy do potęgi 2: ")
# print(np.power(m1, 2))
# print("Pierwiastek z elementów macierzy: ")
# print(np.sqrt(m1))

# m1 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
# print("m1: ")
# print(m1)
# print("Logarytm naturalny z elementów macierzy: ")
# print(np.log(m1))
# print("Sinus z elementów macierzy: ")
# print(np.sin(m1))
# print("Tangens z elementów macierzy: ")
# print(np.tan(m1))

# m1 = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
# print("m1: ")
# print(m1)
# print("m1.max(): ")
# print(m1.max())
# print("m1.max(axis=0): ")
# print(m1.max(axis=0))
# print("m1.min(axis=1): ")
# print(m1.min(axis=1))
#
# m1 = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
# print("m1: ")
# print(m1)
# print("m1.sum()")
# print(m1.sum())
# print("m1.sum(axis=0)")
# print(m1.sum(axis=0))
# print("m1.sum(axis=1)")
# print(m1.sum(axis=1))

# m1 = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
# print("m1: ")
# print(m1)
# print("m1.mean()")
# print(m1.mean())
# print("m1.mean(axis=0)")
# print(m1.mean(axis=0))
# print("m1.mean(axis=1)")
# print(m1.mean(axis=1))
# print("np.mean(m1, axis=1)")
# print(np.mean(m1, axis=1))

# m1 = np.array([[3, 6, 1, 12], [7, 10, 5, 4], [11, 2, 9, 8]])
# print("m1: ")
# print(m1)
# print("np.sort(m1, axis=0): ")
# print(np.sort(m1, axis=0))
# print("np.sort(m1, axis=1): ")
# print(np.sort(m1, axis=1))

# m1 = np.linspace(1, 16, 16).reshape(4, 4).astype(int)
# print("m1 ")
# print(m1)
#
# print(m1[1:3, -2:1])


# print("m1[2, 3] ")
# print(m1[2, 3])
# print("m1[2][3] ")
# print(m1[2][3])
# print("m1[1:3, 1] ")
# print(m1[1:3, 1])
# print("m1[1:3, 1:2] ")
# print(m1[1:3, 1:2])

# m1 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
# print("m1: ")
# print(m1)
# m2 = m1
# m2[1, 1] = 100
# print("m1: ")
# print(m1)
# m3 = m1.copy()
# m3[2, 0] = 99
# print("m1: ")
# print(m1)


# m1 = np.linspace(1, 12, 12).reshape(3, 4).astype(int)
# print("m1 ")
# print(m1)
# m2 = np.transpose(m1)   # płytka kopia!
# print("m2 ")
# print(m2)
# m2[2, 2] = 99
# print("m1 ")
# print(m1)

# m1 = np.linspace(1, 12, 12).reshape(3, 4).astype(int)
# print("m1 ")
# print(m1)
# m3 = np.transpose(m1).copy()
# print("m3 ")
# print(m3)
# m3[1, 1] = 88
# print("m1 ")
# print(m1)

# m1 = np.linspace(1, 8, 8).reshape(4, 2).astype(int)
# print("m1 ")
# print(m1)
# m2 = m1.ravel()
# print("m2 ")
# print(m2)
# m2 = np.reshape(m1, (2, 4))   # płytka kopia
# m1[1, 1] = 99
# print("m2 ")
# print(m2)
# m2 = np.resize(m1, (2, 4))
# m1[1, 1] = 88
# print("m2 ")
# print(m2)

# m1 = np.array([[1, 2], [3, 4]])
# m2 = np.array([[5, 6], [7, 8]])
# print("m1 ")
# print(m1)
# print("m2 ")
# print(m2)
# m3 = np.concatenate((m1, m2))
# m4 = np.vstack((m1, m2))
# m5 = np.row_stack((m1, m2))
# print("m3")
# print(m3)
# print("m4")
# print(m4)
# print("m5")
# print(m5)

# m1 = np.array([[1, 2], [3, 4]])
# m2 = np.array([[5, 6], [7, 8]])
# print("m1 ")
# print(m1)
# print("m2 ")
# print(m2)
# m3 = np.concatenate((m1, m2), axis=1)
# m4 = np.hstack((m1, m2))
# m5 = np.column_stack((m1, m2))
# print("m3")
# print(m3)
# print("m4")
# print(m4)
# print("m5")
# print(m5)

# ------------------------------------------------ pandas ---------------------------------------------------- #
# ------------------------------------------------ pandas ---------------------------------------------------- #
# ------------------------------------------------ pandas ---------------------------------------------------- #

import pandas as pd

# s = pd.Series([3, -5, 7, 4], index=['a', 'b', 'c', 'd'])
# print(s)

# s = pd.Series([10, 11, 12, 13], index=['r0', 'r1', 'r2', 'r3'])
# print("s ")
# print(s)
# print("s['r1']: " + str(s['r1']))
# print("s[2]: " + str(s[2]))
# print("s[2:]")
# print(s[2:])
# s['r4'] = 14
# print("s ")
# print(s)


# data = {'Country': ['Belgium', 'India', 'Brazil'],
#         'Capital': ['Brussels', 'New Delhi', 'Brasília'],
#         'Population': [11190846, 1303171035, 207847528]}
# df = pd.DataFrame(data)
# print(df)

# df = pd.read_csv('diabetes.csv').head(10)
# print(df.head(8))
# print(df[3])

# df = pd.read_csv('diabetes.csv', nrows=4)
# print(df.head(8))

# r = range(10)
# print(list(r))

# df = pd.read_csv('diabetes.csv', header=None)
# print(df.head(4))

# print(df)

# print(df[["SkinThickness", "Insulin"]].head())  # zwrócić uwagę na podwójne nawiasy
# print(df[["Insulin", "SkinThickness"]].head())  # kolejność kolumn ma znaczenie
#
# print(type(df[["SkinThickness"]]))
# print(df[["SkinThickness"]].head(3))  # zwraca DataFrame
# print(type(df["SkinThickness"]))
# print(df["SkinThickness"].head(3))  # zwraca Series

# s = pd.Series([("Patient_" + str(i)) for i in range(df.shape[0])])
# df.set_index(s, inplace=True)
# df["abc def"] = 1
# print(dir(df))
# df.info()
# print(df)

# print(df.loc["Patient_3"])  # zwraca Series
#
# print(df.loc[["Patient_3", "Patient_5"]])  # zwraca DataFrame

# print(df.loc["Patient_3": "Patient_6"])  # ostatni wiersz jest zawarty w nowej ramce
#
# print(df.loc["Patient_7":])  # od Patient_7 do końca
# print(df.loc["Patient_1": "Patient_8": 2])  # brany jest co drugi wiersz
#
# print(df.loc[["Patient_2", "Patient_5"], "BMI"])    # zwraca serię

# print(df.loc[["Patient_2", "Patient_5"], ["SkinThickness", "Insulin", "BMI"]])
#
# print(df.loc["Patient_2":"Patient_5", ["SkinThickness", "Insulin", "BMI"]])
#
# print(df.loc["Patient_8", "BMI"])   # zwraca skalar

# print(df.loc["Patient_7":, "BloodPressure":"BMI"])
#
# print(df.loc[:, ["BloodPressure", "BMI", "Insulin"]])
#
# print(df.loc["Patient_1":"Patient_4", :])   # taki sam rezultat da df.loc["Patient_1":"Patient_4"]

# print(df.iloc[3])  # zwraca Series
#
# print(df.iloc[[3, 5]])  # pamiętać o podwójnych nawiasach; wpp. zwróci wartość z komórki [3, 5]
#
# print(df.iloc[3: 7])  # ostatni wiersz NIE jest zawarty w nowej ramce
#
# print(df.iloc[4::2])    # co drugi wiersz, począwszy od piątego aż do końca
#
# print(df.iloc[[2, 4], [3, 5]])
#
# print(df.iloc[7:, 2:6])

# print(df.iloc[4, 2])    # zwraca skalar
#
# print(df.iloc[:, 1:4])

# print(df.ix["Patient_3":"Patient_5", 5:8])

# print(df[3:5])
# print(df["Patient_3":"Patient_4"])

# print(df[[3, 4, 5]])

# wybór kolumn; tylko listą etykiet, nie można przez zakres
# print(df[["BloodPressure", "SkinThickness", "Insulin", "BMI"]])
# wybór wierzy; tylko przez zakres
# print(df[1:4])

# df = pd.read_csv('diabetes.csv').head()
# print(df.iloc[1:4, :])
# print(df.loc[1:4, :])